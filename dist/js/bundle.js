!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}i.r(e);var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.renderParam={clearColor:15592945,width:window.innerWidth,height:window.innerHeight},this.cameraParam={fov:60,near:.1,far:10,lookAt:new THREE.Vector3(0,0,0),x:0,y:0,z:1},this.scene=null,this.camera=null,this.renderer=null,this.geometry=null,this.material=null,this.mesh=null,this.isInitialized=!1}var e,i,s;return e=t,(i=[{key:"init",value:function(){this._setScene(),this._setRender(),this._setCamera(),this.isInitialized=!0}},{key:"_setScene",value:function(){this.scene=new THREE.Scene}},{key:"_setRender",value:function(){this.renderer=new THREE.WebGLRenderer,this.renderer.setClearColor(new THREE.Color(this.renderParam.clearColor)),this.renderer.setSize(this.renderParam.width,this.renderParam.height),document.querySelector("#webgl").appendChild(this.renderer.domElement)}},{key:"_setCamera",value:function(){this.isInitialized||(this.camera=new THREE.PerspectiveCamera(0,0,this.cameraParam.near,this.cameraParam.far),this.camera.position.set(this.cameraParam.x,this.cameraParam.y,this.cameraParam.z),this.camera.lookAt(this.cameraParam.lookAt));var t=window.innerWidth,e=window.innerHeight;this.camera.aspect=t/e,this.camera.fov=2*THREE.MathUtils.radToDeg(Math.atan(t/this.camera.aspect/(2*this.camera.position.z))),this.camera.updateProjectionMatrix(),this.renderer.setSize(t,e)}},{key:"_render",value:function(){this.renderer.render(this.scene,this.camera)}},{key:"onResize",value:function(){this._setCamera()}},{key:"onRaf",value:function(){this._render()}}])&&n(e.prototype,i),s&&n(e,s),t}();function a(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,n;return e=t,n=[{key:"randomIntFromRange",value:function(t,e){return Math.floor(Math.random()*(e-t+1)+t)}},{key:"randomColor",value:function(t){return t[Math.floor(Math.random()*t.length)]}}],(i=null)&&a(e.prototype,i),n&&a(e,n),t}();function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var h=function(){function t(e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.x=e,this.y=i}var e,i,n;return e=t,(i=[{key:"set",value:function(t,e){return this.x=t,this.y=e,this}},{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"add",value:function(t){return this.x+=t.x,this.y+=t.y,this}},{key:"sub",value:function(t){return this.x-=t.x,this.y-=t.y,this}},{key:"mult",value:function(t){return this.x*=t.x,this.y*=t.y,this}},{key:"magnitude",value:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"setFromScalarAngle",value:function(t,e){this.x=Math.cos(e)*t,this.y=Math.sin(e)*t}}])&&o(e.prototype,i),n&&o(e,n),t}();function u(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(e,i,n,s,a,r,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.position=new h(i,n),this.velocity=new h,this.velocity.setFromScalarAngle(s,a),this.radius=r,this.color=o,this.range=100}var e,i,n;return e=t,(i=[{key:"update",value:function(){this.position.add(this.velocity),this.position.x-this.range>this.canvas.width&&(this.position.x=this.canvas.width/2,this.position.y=this.canvas.height/2),this.position.x+this.range<0&&(this.position.x=this.canvas.width/2,this.position.y=this.canvas.height/2),this.position.y-this.range>this.canvas.height&&(this.position.x=this.canvas.width/2,this.position.y=this.canvas.height/2),this.position.y+this.range<0&&(this.position.x=this.canvas.width/2,this.position.y=this.canvas.height/2)}}])&&u(e.prototype,i),n&&u(e,n),t}();function l(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.width=this.canvas.width=window.innerWidth,this.height=this.canvas.height=window.innerHeight,this.particles=[],this.particleNum=100,this.colors=["#0952BD","#A5BFF0","#118CD6","#1AAEE8","#F2E8C9"],this.texture=null}var e,i,n;return e=t,(i=[{key:"init",value:function(){for(var t=0;t<this.particleNum;t++)this.particles.push(new c(this.canvas,this.canvas.width/2,this.canvas.height/2,8*Math.random()+2,Math.random()*Math.PI*2,r.randomIntFromRange(5,7),r.randomColor(this.colors)))}},{key:"draw",value:function(){for(var t=0;t<this.particleNum;t++){var e=this.particles[t];e.update(),this.ctx.save(),this.ctx.beginPath(),this.ctx.arc(e.position.x,e.position.y,e.radius,0,2*Math.PI),this.ctx.shadowColor=e.color,this.ctx.shadowBlur=5,this.ctx.shadowOffsetX=0,this.ctx.shadowOffsetY=0,this.ctx.globalAlpha="1",this.ctx.fillStyle=e.color,this.ctx.fill(),this.ctx.restore()}}},{key:"render",value:function(){this.ctx.fillStyle="hsla(260,40%,5%,.2)",this.ctx.fillRect(0,0,this.width,this.height),this.draw()}},{key:"onRaf",value:function(){this.render()}},{key:"_getTexture",value:function(){return this.texture=new THREE.Texture(this.canvas),this.texture.needsUpdate=!0,this.texture.minFilter=THREE.LinearFilter,this.texture}},{key:"onResize",value:function(){this.width=this.canvas.width=window.innerWidth,this.height=this.canvas.height=window.innerHeight}}])&&l(e.prototype,i),n&&l(e,n),t}();function d(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var m=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.meshWindowSizeRatio={x:.5,y:.5},this.geometryParm={width:1,height:1,widthSegments:1,heightSegments:1},this.materialParam={useWireframe:!1},this.stage=e,this.mesh=null,this.windowWidth=0,this.windowHeight=0,this.windowWidthHalf=0,this.windowHeightHalf=0,this.meshWidthHalf=0,this.meshHeightHalf=0,this.mouseX=null,this.mouseY=null,this.mouseRange=50,this.friction=10,this.canvas=new f}var e,i,n;return e=t,(i=[{key:"init",value:function(){this.canvas.init(),this._setWindowSize(),this._setMouse(),this._setMesh(),this._setMeshScale()}},{key:"_setWindowSize",value:function(){this.windowWidth=window.innerWidth,this.windowHeight=window.innerHeight,this.windowWidthHalf=.5*this.windowWidth,this.windowHeightHalf=.5*this.windowHeight}},{key:"_setMouse",value:function(){var t=this;window.addEventListener("mousemove",(function(e){t.mouseX=e.clientX,t.mouseY=e.clientY,t.mouseX/=t.windowWidth,t.mouseY/=t.windowHeight,t.mouseX=2*t.mouseX-1,t.mouseY=2*t.mouseY-1,t.mouseX*=t.mouseRange,t.mouseY*=t.mouseRange}))}},{key:"_setMesh",value:function(){var t=new THREE.PlaneBufferGeometry(this.geometryParm.width,this.geometryParm.height,this.geometryParm.widthSegments,this.geometryParm.heightSegments),e=new THREE.MeshBasicMaterial({map:this.canvas._getTexture()});this.mesh=new THREE.Mesh(t,e),this.stage.scene.add(this.mesh)}},{key:"_setMeshScale",value:function(){this.mesh.scale.x=window.innerWidth*this.meshWindowSizeRatio.x,this.mesh.scale.y=window.innerHeight*this.meshWindowSizeRatio.y,this.meshWidthHalf=.5*this.mesh.scale.x,this.meshHeightHalf=.5*this.mesh.scale.y}},{key:"_render",value:function(){var t=(this.mouseX-this.mesh.position.x)/this.friction,e=(-this.mouseY-this.mesh.position.y)/this.friction;this.mesh.position.x+=t,this.mesh.position.y+=e,this.mesh.rotation.x+=.5*-e/5e4,this.mesh.rotation.y+=.5*-t/5e4,this.mesh.material.map.needsUpdate=!0}},{key:"onResize",value:function(){this.canvas.onResize(),this._setWindowSize(),this._setMeshScale()}},{key:"onRaf",value:function(){this._render(),this.canvas.onRaf()}}])&&d(e.prototype,i),n&&d(e,n),t}();!function(){var t=new s;t.init();var e=new m(t);e.init(),window.addEventListener("resize",(function(){t.onResize(),e.onResize()}));!function i(){window.requestAnimationFrame((function(){t.onRaf(),e.onRaf(),i()}))}()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,